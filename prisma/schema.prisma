// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//datasource db {
//  provider = "sqlite"
//  url      = env("DATABASE_URL")
//}

model Job {
  id          String    @id @default(cuid())
  applyUrl    String
  logo        String
  title       String
  company     String
  location    String
  daysAgo     Int
  salary      Int
  description String
  skills      String[]  
  educations  String[]  
  category    String    
  type        String    // 'Full-time' or 'Part-time' or 'Internship' or 'Contract'
  remote      String    // remote status (e.g., "remote" or "onsite")
  deadline    DateTime  // Deadline to apply
  created     DateTime   @default(now())
  updated     DateTime   @updatedAt
  bookmarks   Bookmarked[]
}

model Bookmarked {
  id        String   @id @default(cuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}


model UserFile {
  id      String    @id @default(cuid())
  experience String
  user        User      @relation(fields: [userId], references: [id])
  userId      String @unique
  created DateTime @default(now())
  updated DateTime @updatedAt
}
  
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String
  hasAccess      Boolean  @default(false)
  bookmarks      Bookmarked[]
  userFile       UserFile?
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
}